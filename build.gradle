buildscript {
    ext {
        springBootVersion = ext['spring-boot.version']
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'
    }
}

def javaProjects = [project(':wallride-bootstrap'), project(':wallride-parent'), project(':wallride-server'), project(':wallride-tools')]
def bootProjects = [project(':wallride-bootstrap')]

wrapper.gradleVersion = '2.13'

configure(allprojects) {
    group = "org.wallride"

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"

    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven {
            url "http://repo.spring.io/milestone"
        }
    }

    dependencyManagement {
        imports {
//          mavenBom('io.spring.platform:platform-bom:Athens-RC1') {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${ext['spring-boot.version']}") {
                bomProperties([
                        'thymeleaf.version': "3.0.0.RELEASE",
                        'hibernate.version': '5.1.0.Final'
                ])
            }
        }
        dependencies {
            dependency "org.springframework.cloud:spring-cloud-aws-context:${ext['spring-cloud-aws-context.version']}"
            dependency "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:${ext['thymeleaf.version']}"
            dependency "org.thymeleaf.extras:thymeleaf-extras-java8time:${ext['thymeleaf.version']}"
            dependency "org.hibernate:hibernate-core:${ext['hibernate.version']}"
            dependency "org.hibernate:hibernate-entitymanager:${ext['hibernate.version']}"
            dependency "org.hibernate:hibernate-java8:${ext['hibernate.version']}"
            dependency "org.hibernate:hibernate-jpamodelgen:${ext['hibernate.version']}"
            dependency "org.hibernate:hibernate-validator:${ext['hibernate.version']}"
            dependency "org.hibernate:hibernate-search-orm:${ext['hibernate-search.version']}"
            dependency "org.hibernate:hibernate-search-infinispan:${ext['hibernate-search.version']}"
            dependency "org.infinispan:infinispan-directory-provider:${ext['infinispan.version']}"
            dependency "org.infinispan:infinispan-cachestore-jdbc:${ext['infinispan.version']}"
            dependency "org.infinispan:infinispan-lucene-directory:${ext['infinispan.version']}"
            dependency "org.infinispan:infinispan-spring4:${ext['infinispan-spring4.version']}"
            dependency "org.apache.lucene:lucene-queryparser:${ext['lucene.version']}"
            dependency "org.apache.lucene:lucene-analyzers-kuromoji:${ext['lucene.version']}"
            dependency "com.amazonaws:aws-java-sdk-s3:${ext['amazonaws.version']}"
        }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
    }

    configurations {
        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.apache.logging.log4j'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'

    bootRun { systemProperties = System.properties }
}

